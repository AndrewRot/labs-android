diff --git a/app/lib/Database.js b/app/lib/Database.js
index ddb3eb2..b5d564a 100644
--- a/app/lib/Database.js
+++ b/app/lib/Database.js
@@ -55,17 +55,74 @@ class Database {
      */
     static unsubscribeUser(userCurrentExperimentID) {
         return new Promise( (success, fail) => {
-
             //Update this experiment's active user count
             let dailyReactionPath = "/experiment/" + userCurrentExperimentID;
             success(firebase.database().ref(dailyReactionPath).child('active_user_count').transaction(function (currentValue) {
                 return (currentValue || 0) - 1
+            }).then(() => {
+                this.archiveUserData(userCurrentExperimentID)
             }));
-
         });
+    }
+
+    /**
+     * Archive the user's data
+     * @param userCurrentExperimentID
+     * @returns {firebase.Promise<any>|!firebase.Promise.<void>}
+     */
+    static archiveUserData(userCurrentExperimentID) {
+        return new Promise( (success, fail) => {
+            firebase.auth().onAuthStateChanged((user) => {
+                if (user) {
+                    var id = user.uid;
+                    var userPath = "/user/"+id;
+
+                    //extract the user's satisfaction rating
+                    firebase.database().ref(userPath).on('value', (data) => {
+
+                        console.log("ARCHIVING DATA");
+                        //Check to see if the user has a satisfaction for the experiment their subscribed to, if not, don't update their archive.
+                        if(data.val().satisfaction){
+                            var userSatisfaction = data.val().satisfaction;
+
+                            console.log("With userSatisfaction: "+userSatisfaction);
+                            let archiveDataPath = "/user/" + id + "/archive_data/"+userCurrentExperimentID;
+                            success( firebase.database().ref(archiveDataPath).update({
+                                satisfaction: userSatisfaction
+                            }).then(()=>{
+                                this.clearActiveExperimentData()
+                            }))
+                        } else {
+                            success();
+                        }
+                    });
+                }
+            });
 
+        });
     }
 
+    /**
+     * Archive the user's data
+     * @param userCurrentExperimentID
+     * @returns {firebase.Promise<any>|!firebase.Promise.<void>}
+     */
+    static clearActiveExperimentData() {
+        return new Promise((success, fail) => {
+            firebase.auth().onAuthStateChanged((user) => {
+                if (user) {
+                    var id = user.uid;
+                    var userPath = "/user/" + id;
+
+                    success(firebase.database().ref(userPath).update({
+                        reactions: null,
+                        satisfaction: null
+                    }))
+
+                }
+            });
+        });
+    }
 
     /**
      * Sets a users reaction for the day
@@ -104,7 +161,6 @@ class Database {
                 if(user) {
                     var id = user.uid;
                     let userPath = "/user/" + id ;
-
                     //get the user's reactions -> then average them
                     this.getMyExperimentData().then((userExperimentData) => {
                         var reactions = userExperimentData.reactions;
@@ -114,7 +170,6 @@ class Database {
                            count += 1;
                         });
                         satisfaction = sum / count;
-
                         //post user satisfaction
                         success( firebase.database().ref(userPath).update({
                             satisfaction: satisfaction
@@ -143,14 +198,17 @@ class Database {
                     //get the user's reactions -> then average them&&&&&&&&&&&&&&
                     this.getAllUserExperimentData(experiment_id).then((userExperimentSatisfactionData) => {
 
-
                         //calculate the overall satisfaction
                         let sum = 0, count = 0;
                         userExperimentSatisfactionData.map((userSatisfaction) => {
                             sum += userSatisfaction;
                             count += 1;
                         });
-                        var experimentSatisfaction = sum / count;
+                        var experimentSatisfaction;
+                        if(count == 0)
+                            experimentSatisfaction = null; //delete this field for now
+                        else
+                            experimentSatisfaction = sum / count;
 
                         //post it in the experiment
                         success( firebase.database().ref(experimentPath).update({
@@ -166,19 +224,36 @@ class Database {
      * Gets all users satisfaction ratings for a given experiment
      * @returns {firebase.Promise<any>|!firebase.Promise.<void>}
      */
-    static getAllUserExperimentData(experiment_id) {
+    static
+    getAllUserExperimentData(experiment_id) {
         return new Promise( (success, fail) => {
             let userPath = "/user/"  ;
             return firebase.database().ref(userPath).on('value', (data) => {
 
                 //convert data to an array
                 var userList =[]
+                var userArchiveList = []
                 data.forEach(function(data) {
-
                     //Filter out all but given experiment id - also filter out any nulls - this would indicate that a user has subscribed to an experiment, but hasn't posted any reactions yet
-                    if(data.val().experiment_id == experiment_id && data.val().satisfaction){
+                    if(data.val().satisfaction && data.val().experiment_id == experiment_id){
                         userList.push(data.val().satisfaction);
                     }
+                    //Snatch all fromthe archives as well ;)
+                    // if(data.val().archive_data) {
+                    //     // Object.keys(data.val().archive_data).forEach((key) => {
+                    //     //     if(key) {
+                    //     //         //console.log('KEEEEEEEY' + key);
+                    //     //         if(key == experiment_id){
+                    //     //             if(data.val().archive_data[key]){
+                    //     //                 console.log(data.val().archive_data[key]);
+                    //     //                 userArchiveList.push(data.val().archive_data[key].satisfaction)
+                    //     //             }
+                    //     //
+                    //     //         }
+                    //     //     }
+                    //     // });
+                    // }
+                    // console.log("ARCHIVE USER RATINGS: "+ JSON.stringify(userArchiveList));
                 });
                 success(userList);
             });
@@ -197,12 +272,10 @@ class Database {
     static getMyExperimentData() {
         return new Promise( (success, fail) => {
             firebase.auth().onAuthStateChanged((user) => { //Retrieve current users id
-
                 if(user) {
                     var id = user.uid;
                     let experimentPath = "/user/" + id ;
                     return firebase.database().ref(experimentPath).on('value', (snapshot) => {
-
                         success(snapshot.val());
                     });
                 }
@@ -251,7 +324,6 @@ class Database {
                     let experimentPath = "/experiment/" + experiment_id;
                     return firebase.database().ref(experimentPath).on('value', (snapshot) => {
                         var experimentInfo = JSON.stringify(snapshot.val());
-                        console.log("experimentInfo: "+experimentInfo);
                         success(snapshot.val());
                     });
                 }
